swagger: "2.0"
info:
  title: Cart API
  description: This is the complete API specification for the endpoins in Mipekicha
  version: "1.0.0"
paths:
  /api/Cart/{id}:
    get:
      summary: Get a Cart
      description: Resource to be called by the administrative user to query the database for a Cart.
      tags:
        - Carts
      parameters:
          - name: id
            in: path
            description: ID of the Cart to retrieve
            required: true
            type: string
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/CartSingle"
        400:
          description: Some parameter is wrong of conflicting
          schema:
            type: array
            items:
              $ref: "#/definitions/Error400"
        403:
          description: Request not authorized
          schema:
            type: array
            items:
              $ref: "#/definitions/Error403"
        404:
          description: The Cart doesnt exists
          schema:
            type: array
            items:
              $ref: "#/definitions/Error404"
        500:
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: "#/definitions/Error500"
    delete:
      summary: Delete all products from an existing Cart
      tags:
        - Carts
      parameters:
        - name: id
          in: path
          description: ID of the Cart to delete all the products
          required: true
          type: string
      responses:
        201:
          description: Cart created
          schema:
            $ref: "#/definitions/CartResponse"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/Error400"
        403:
          description: Request not authorized
          schema:
            type: array
            items:
              $ref: "#/definitions/Error403"
        404:
          description: The Cart doesnt exists
          schema:
            type: array
            items:
              $ref: "#/definitions/Error404"
        500:
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: "#/definitions/Error500"
  /api/Cart/{id}/Product/{id}:
    put:
      summary: Update an existing Cart
      tags:
        - Carts
      parameters:
        - name: id
          in: path
          description: ID of the Cart to update
          required: true
          type: string
        - name: productId
          in: path
          description: ID of the Product to update
          required: true
          type: string
        - in: body
          name: Cart
          description: Resource where the administrative user can update an existing Cart
          schema:
            $ref: "#/definitions/CartUpdate"
      responses:
        201:
          description: Cart created
          schema:
            $ref: "#/definitions/CartResponse"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/Error400"
        403:
          description: Request not authorized
          schema:
            type: array
            items:
              $ref: "#/definitions/Error403"
        404:
          description: The Cart doesnt exists
          schema:
            type: array
            items:
              $ref: "#/definitions/Error404"
        500:
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: "#/definitions/Error500"
  /api/Cart:
    get:
      summary: Get a list of Carts
      tags:
        - Carts
      responses:
        200:
          description: A list of Carts
          schema:
            type: array
            items:
              $ref: "#/definitions/Cart"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/Error400"
        403:
          description: Request not authorized
          schema:
            type: array
            items:
              $ref: "#/definitions/Error403"
        404:
          description: The Cart doesnt exists
          schema:
            type: array
            items:
              $ref: "#/definitions/Error404"
        500:
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: "#/definitions/Error500"
    post:
      summary: Create a new Cart
      tags:
        - Carts
      responses:
        201:
          description: Cart created
          schema:
            $ref: "#/definitions/CartResponse"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/Error400"
        403:
          description: Request not authorized
          schema:
            type: array
            items:
              $ref: "#/definitions/Error403"
        404:
          description: The Cart doesnt exists
          schema:
            type: array
            items:
              $ref: "#/definitions/Error404"
        500:
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: "#/definitions/Error500"
definitions:
  Cart:
    type: object
    properties:
      _id:
        type: string
      products:
        type: array
  CartUpdate:
    type: object
    required:
      - products
      - quantity
    properties:
      products:
        type: array
      quantity:
        type: number
        example: 2
  CartResponse:
    type: object
    properties:
      products:
        type: array
      _id:
        type: object
  CartSingle:
    type: object
    properties:
      _id:
        type: string
      products:
        type: array
  Error400:
    type: object
    properties:
      request:
        type: object
        description: Request associated with the error thrown, as received by server.
      error:
        type: string
        example: 400
      message:
        type: string
  Error403:
    type: object
    properties:
      error:
        type: string
        example: 403
      message:
        type: string
        example: Forbidden
  Error404:
    type: object
    properties:
      error:
        type: string
        example: 404
      message:
        type: string
        example: Not found.
  Error500:
    type: object
    properties:
      status:
        type: string
        example: 500
      error:
        type: string

