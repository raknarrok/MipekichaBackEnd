swagger: "2.0"
info:
  title: Product API
  description: This is the complete API specification for the endpoins in Mipekicha
  version: "1.0.0"
paths:
  /api/products/{id}:
    get:
      summary: Get a product
      description: Resource to be called by the administrative user to query the database for a Product.
      tags:
        - Products
      parameters:
          - name: id
            in: path
            description: ID of the product to retrieve
            required: true
            type: string
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/ProductSingle"
        400:
          description: Some parameter is wrong of conflicting
          schema:
            type: array
            items:
              $ref: "#/definitions/Error400"
        403:
          description: Request not authorized
          schema:
            type: array
            items:
              $ref: "#/definitions/Error403"
        404:
          description: The product doesnt exists
          schema:
            type: array
            items:
              $ref: "#/definitions/Error404"
        500:
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: "#/definitions/Error500"
    put:
      summary: Update an existing product
      tags:
        - Products
      parameters:
        - name: id
          in: path
          description: ID of the product to update
          required: true
          type: string
        - in: body
          name: product
          description: Resource where the administrative user can update an existing Product
          schema:
            $ref: "#/definitions/ProductUpdate"
      responses:
        201:
          description: Product created
          schema:
            $ref: "#/definitions/ProductResponse"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/Error400"
        403:
          description: Request not authorized
          schema:
            type: array
            items:
              $ref: "#/definitions/Error403"
        404:
          description: The product doesnt exists
          schema:
            type: array
            items:
              $ref: "#/definitions/Error404"
        500:
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: "#/definitions/Error500"
    delete:
      summary: Delete an existing product
      tags:
        - Products
      parameters:
        - name: id
          in: path
          description: ID of the product to delete
          required: true
          type: string
      responses:
        201:
          description: Product created
          schema:
            $ref: "#/definitions/ProductResponse"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/Error400"
        403:
          description: Request not authorized
          schema:
            type: array
            items:
              $ref: "#/definitions/Error403"
        404:
          description: The product doesnt exists
          schema:
            type: array
            items:
              $ref: "#/definitions/Error404"
        500:
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: "#/definitions/Error500"
  /api/products/code/{code}:
    get:
      summary: Get a product by code
      description: Resource to be called by the administrative user to query the database for a Product.
      tags:
        - Products
      parameters:
          - name: code
            in: path
            description: Product Code to retrieve
            required: true
            type: string
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/ProductSingle"
        400:
          description: Some parameter is wrong of conflicting
          schema:
            type: array
            items:
              $ref: "#/definitions/Error400"
        403:
          description: Request not authorized
          schema:
            type: array
            items:
              $ref: "#/definitions/Error403"
        404:
          description: The product doesnt exists
          schema:
            type: array
            items:
              $ref: "#/definitions/Error404"
        500:
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: "#/definitions/Error500"
  /api/products:
    get:
      summary: Get a list of products
      tags:
        - Products
      responses:
        200:
          description: A list of products
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/Error400"
        403:
          description: Request not authorized
          schema:
            type: array
            items:
              $ref: "#/definitions/Error403"
        404:
          description: The product doesnt exists
          schema:
            type: array
            items:
              $ref: "#/definitions/Error404"
        500:
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: "#/definitions/Error500"
    post:
      summary: Create a new product
      tags:
        - Products
      parameters:
        - in: body
          name: product
          description: The product to create
          schema:
            $ref: "#/definitions/Product"
      responses:
        201:
          description: Product created
          schema:
            $ref: "#/definitions/ProductResponse"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/Error400"
        403:
          description: Request not authorized
          schema:
            type: array
            items:
              $ref: "#/definitions/Error403"
        404:
          description: The product doesnt exists
          schema:
            type: array
            items:
              $ref: "#/definitions/Error404"
        500:
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: "#/definitions/Error500"
definitions:
  Product:
    type: object
    required:
      - title
      - description
      - price
      - code
      - category
      - statusItem
    properties:
      title:
        type: string
        example: Cinto Especial
      description:
        type: string
        example: 1 pulgada de ancho Nombre y 1 numero de tel bordado
      price:
        type: number
        example: 250
      thumbnails:
        type: string
        example: https://raknarrok.github.io/static/images/productos/cintos/normal.png, https://raknarrok.github.io/static/images/productos/cintos/normal.png
      code:
        type: string
        example: CRT0828
      stock:
        type: number
        example: 1
      category:
        type: string
  ProductUpdate:
    type: object
    required:
      - title
      - description
      - price
      - code
      - category
      - statusItem
    properties:
      title:
        type: string
        example: Cinto Especial
      description:
        type: string
        example: 1 pulgada de ancho Nombre y 1 numero de tel bordado
      price:
        type: number
        example: 250
      thumbnails:
        type: string
        example: https://raknarrok.github.io/static/images/productos/cintos/normal.png, https://raknarrok.github.io/static/images/productos/cintos/normal.png
      stock:
        type: number
        example: 1
      category:
        type: string
  ProductResponse:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
      price:
        type: number
      thumbnails:
        type: string
      code:
        type: string
      stock:
        type: number
      category:
        type: string
  ProductSingle:
    type: object
    properties:
      _id:
        type: string
      title:
        type: string
      description:
        type: string
      price:
        type: number
      thumbnails:
        type: string
      code:
        type: string
      stock:
        type: number
      category:
        type: string
  Error400:
    type: object
    properties:
      request:
        type: object
        description: Request associated with the error thrown, as received by server.
      error:
        type: string
        example: 400
      message:
        type: string
  Error403:
    type: object
    properties:
      error:
        type: string
        example: 403
      message:
        type: string
        example: Forbidden
  Error404:
    type: object
    properties:
      error:
        type: string
        example: 404
      message:
        type: string
        example: Not found.
  Error500:
    type: object
    properties:
      status:
        type: string
        example: 500
      error:
        type: string

